Task 1 - Build the API
Let's now imagine that our products will also come with reviews. A review will have the following data:

userName
text
product (an id of the product that the review is associated with - this is optional if you're using sub-docs)
Let's implement a reviews array for each product - it's up to you whether you use "sub-docs" or "refs and population".

Now we'll want to build out the rest of the API for these products and reviews. Create the following routes:

GET /products/:product: Returns a specific product by its id

GET /products/:product/reviews: Returns ALL the reviews for a product, but limited to 4 at a time. This one will be a little tricky as you'll have to retrieve them out of the products. You should be able to pass in an optional page query parameter to paginate.

POST /products: Creates a new product in the database

POST /products/:product/reviews: Creates a new review in the database by adding it to the correct product's reviews array.

DELETE /products/:product: Deletes a product by id

DELETE /reviews/:review: Deletes a review by id

No PUT for now.